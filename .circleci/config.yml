# Orb 'circleci/azure-aks@0.2.1' resolved to 'circleci/azure-aks@0.2.1'
# Orb 'circleci/kubernetes@0.4.0' resolved to 'circleci/kubernetes@0.4.0'
version: 2
jobs:
  azure-aks/create-cluster:
    docker:
    - image: circleci/python:3.7-stretch
    steps:
    - run:
        command: |
          # Verify the CLI isn't already installed
          # Use which instead of command -v for wider coverage of envs

          if which az > /dev/null; then
            echo "Azure CLI installed already."
            exit 0
          fi

          # Set sudo to work whether logged in as root user or non-root user

          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          sudo apt-get update && sudo apt-get -qqy install apt-transport-https

          if [[ $(command -v lsb_release) == "" ]]; then
            echo "Installing lsb_release"
            sudo apt-get -qqy install lsb-release
          fi

          # Create an environment variable for the correct distribution
          export AZ_REPO=$(lsb_release -cs)

          # Modify your sources list

          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
            sudo tee /etc/apt/sources.list.d/azure-cli.list

          if [[ $(command -v curl) == "" ]]; then
            echo "Installing curl"
            sudo apt-get -qqy install curl
          fi

          # Get the Microsoft signing key

          curl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -

          # Update and install the Azure CLI

          sudo apt-get update
          sudo apt-get -qqy install \
            ca-certificates \
            azure-cli
          echo "Azure CLI is now installed."
          echo $SUDO
        name: Install Azure CLI, if not available
    - run:
        command: |
          if [ -n "${AZURE_USERNAME}" ]; then
            echo "User credentials detected; logging in with user"
            sudo su -c 'az login -u '"$AZURE_USERNAME"' -p ' "$AZURE_PASSWORD"
          else
            echo "Login failed; neither user nor Service Principal credentials were provided"
            exit 1
          fi
        name: Login to the Azure CLI with user or Service Principal
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kops release
            KOPS_VERSION=$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)
          else
            KOPS_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kops
          curl -LO https://github.com/kubernetes/kops/releases/download/$KOPS_VERSION/kops-$PLATFORM-amd64

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x kops-$PLATFORM-amd64

          $SUDO mv kops-$PLATFORM-amd64 /usr/local/bin/kops
        name: Install kops
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kubectl release
            KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          else
            KUBECTL_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x ./kubectl

          $SUDO mv ./kubectl /usr/local/bin
        name: Install kubectl
    - run:
        command: |+
          LOCATION="eastus"
          RESOURCE_GROUP="aks-demo-deployment-rg"
          SUBSCRIPTION=""
          TAGS=""
          if [ -n "${LOCATION}" ]; then
            set -- "$@" --location "${LOCATION}"
          fi
          if [ -n "${RESOURCE_GROUP}" ]; then
            set -- "$@" --name "${RESOURCE_GROUP}"
          fi
          if [ -n "${SUBSCRIPTION}" ]; then
            set -- "$@" --subscription "${SUBSCRIPTION}"
          fi
          if [ -n "${TAGS}" ]; then
            set -- "$@" --tags "${TAGS}"
          fi

          az group create "$@"

        name: Create AKS resource group
    - run:
        command: |
          CLUSTER_NAME="aks-demo-deployment"
          RESOURCE_GROUP="aks-demo-deployment-rg"
          LOCATION="eastus"
          SUBSCRIPTION=""
          SERVICE_PRINCIPAL="$AZURE_SP"
          CLIENT_SECRET="$AZURE_SP_PASSWORD"
          NODE_COUNT="-1"
          NODE_OSDISK_SIZE="-1"
          NODE_VM_SIZE=""
          GENERATE_SSH_KEYS="true"
          NO_SSH_KEY="true"
          SSH_KEY_VALUE=""
          ADMIN_USERNAME=""
          DNS_NAME_PREFIX=""
          KUBERNETES_VERSION=""
          TAGS=""
          NO_WAIT="false"
          if [ -n "${CLUSTER_NAME}" ]; then
            set -- "$@" --name "${CLUSTER_NAME}"
          fi
          if [ -n "${RESOURCE_GROUP}" ]; then
            set -- "$@" --resource-group "${RESOURCE_GROUP}"
          fi
          if [ -n "${LOCATION}" ]; then
            set -- "$@" --location "${LOCATION}"
          fi
          if [ -n "${SUBSCRIPTION}" ]; then
            set -- "$@" --subscription "${SUBSCRIPTION}"
          fi
          if [ -n "${SERVICE_PRINCIPAL}" ]; then
            set -- "$@" --service-principal "${SERVICE_PRINCIPAL}"
          fi
          if [ -n "${CLIENT_SECRET}" ]; then
            set -- "$@" --client-secret "${CLIENT_SECRET}"
          fi
          if [ "${NODE_COUNT}" != "-1" ]; then
            set -- "$@" --node-count "${NODE_COUNT}"
          fi
          if [ "${NODE_OSDISK_SIZE}" != "-1" ]; then
            set -- "$@" --node-osdisk-size "${NODE_OSDISK_SIZE}"
          fi
          if [ -n "${NODE_VM_SIZE}" ]; then
            set -- "$@" --node-vm-size "${NODE_VM_SIZE}"
          fi
          if [ "${GENERATE_SSH_KEYS}" == "true" ]; then
            set -- "$@" --generate-ssh-keys
          fi
          if [ "${NO_SSH_KEY}" == "true" ]; then
            set -- "$@" --no-ssh-key
          fi
          if [ -n "${SSH_KEY_VALUE}" ]; then
            set -- "$@" --ssh-key-value "${SSH_KEY_VALUE}"
          fi
          if [ -n "${ADMIN_USERNAME}" ]; then
            set -- "$@" --admin-username "${ADMIN_USERNAME}"
          fi
          if [ -n "${DNS_NAME_PREFIX}" ]; then
            set -- "$@" --dns-name-prefix "${DNS_NAME_PREFIX}"
          fi
          if [ -n "${KUBERNETES_VERSION}" ]; then
            set -- "$@" --kubernetes-version "${KUBERNETES_VERSION}"
          fi
          if [ -n "${TAGS}" ]; then
            set -- "$@" --tags "${TAGS}"
          fi
          if [ "${NO_WAIT}" == "true" ]; then
            set -- "$@" --no-wait
          fi

          az aks create "$@"
        name: Create AKS cluster
        no_output_timeout: 45m
    - run:
        command: |+
          CLUSTER_NAME="aks-demo-deployment"
          RESOURCE_GROUP="aks-demo-deployment-rg"
          SUBSCRIPTION=""

          if [ -n "${CLUSTER_NAME}" ]; then
            set -- "$@" --name "${CLUSTER_NAME}"
          fi
          if [ -n "${RESOURCE_GROUP}" ]; then
            set -- "$@" --resource-group "${RESOURCE_GROUP}"
          fi
          if [ -n "${SUBSCRIPTION}" ]; then
            set -- "$@" --subscription "${SUBSCRIPTION}"
          fi

          az aks show "$@"

        name: Verify cluster
  create-deployment:
    docker:
    - image: circleci/python:3.7-stretch
    steps:
    - run:
        command: |
          if [ -n "${AZURE_USERNAME}" ]; then
            echo "User credentials detected; logging in with user"
            az login -u $AZURE_USERNAME -p $AZURE_PASSWORD
          else
            echo "Login failed; neither user nor Service Principal credentials were provided"
            exit 1
          fi
        name: Login to the Azure CLI with user or Service Principal
    - checkout
    - run:
        command: |
          # Verify the CLI isn't already installed
          # Use which instead of command -v for wider coverage of envs

          if which az > /dev/null; then
            echo "Azure CLI installed already."
            exit 0
          fi

          # Set sudo to work whether logged in as root user or non-root user

          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          $SUDO apt-get update && $SUDO apt-get -qqy install apt-transport-https

          if [[ $(command -v lsb_release) == "" ]]; then
            echo "Installing lsb_release"
            $SUDO apt-get -qqy install lsb-release
          fi

          # Create an environment variable for the correct distribution
          export AZ_REPO=$(lsb_release -cs)

          # Modify your sources list

          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
            $SUDO tee /etc/apt/sources.list.d/azure-cli.list

          if [[ $(command -v curl) == "" ]]; then
            echo "Installing curl"
            $SUDO apt-get -qqy install curl
          fi

          # Get the Microsoft signing key

          curl -L https://packages.microsoft.com/keys/microsoft.asc | $SUDO apt-key add -

          # Update and install the Azure CLI

          $SUDO apt-get update
          $SUDO apt-get -qqy install \
            ca-certificates \
            azure-cli
          echo "Azure CLI is now installed."
        name: Install Azure CLI, if not available
    - run:
        command: |
          if [ -n "${AZURE_USERNAME}" ]; then
            echo "User credentials detected; logging in with user"
            az login -u $AZURE_USERNAME -p $AZURE_PASSWORD
          elif [ -n "${AZURE_SP}" ]; then
            echo "Service Principal credentials detected; logging in with Service Principal"
            az login \
              --service-principal \
              --tenant $AZURE_SP_TENANT \
              -u $AZURE_SP \
              -p $AZURE_SP_PASSWORD
          else
            echo "Login failed; neither user nor Service Principal credentials were provided"
            exit 1
          fi
        name: Login to the Azure CLI with user or Service Principal
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kops release
            KOPS_VERSION=$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)
          else
            KOPS_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kops
          curl -LO https://github.com/kubernetes/kops/releases/download/$KOPS_VERSION/kops-$PLATFORM-amd64

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x kops-$PLATFORM-amd64

          $SUDO mv kops-$PLATFORM-amd64 /usr/local/bin/kops
        name: Install kops
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kubectl release
            KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          else
            KUBECTL_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x ./kubectl

          $SUDO mv ./kubectl /usr/local/bin
        name: Install kubectl
    - run:
        command: |
          CLUSTER_NAME="Kubernetes-hml"
          RESOURCE_GROUP="AKS"
          SUBSCRIPTION=""
          GET_ADMIN_CREDENTIALS="false"
          FILE=""
          OVERWRITE_EXISTING="false"
          if [ -n "${CLUSTER_NAME}" ]; then
            set -- "$@" --name "${CLUSTER_NAME}"
          fi
          if [ -n "${RESOURCE_GROUP}" ]; then
            set -- "$@" --resource-group "${RESOURCE_GROUP}"
          fi
          if [ -n "${SUBSCRIPTION}" ]; then
            set -- "$@" --subscription "${SUBSCRIPTION}"
          fi
          if [ "${GET_ADMIN_CREDENTIALS}" == "true" ]; then
            set -- "$@" --admin
          fi
          if [ -n "${FILE}" ]; then
            set -- "$@" --file "${FILE}"
          fi
          if [ "${OVERWRITE_EXISTING}" == "true" ]; then
            set -- "$@" --overwrite-existing
          fi
          az aks get-credentials "$@"
        name: Update the kubectl configuration file so that the cluster can be accessed
    - run:
        command: |+
          RESOURCE_FILE_PATH="tests/nginx-deployment/deployment.yaml"
          ACTION_TYPE="apply"
          NAMESPACE=""
          DRY_RUN="false"
          if [ -n "${ACTION_TYPE}" ]; then
            set -- "$@" "${ACTION_TYPE}"
          fi
          if [ -n "${RESOURCE_FILE_PATH}" ]; then
            set -- "$@" -f
            set -- "$@" "${RESOURCE_FILE_PATH}"
          fi
          if [ -n "${NAMESPACE}" ]; then
              set -- "$@" --namespace="${NAMESPACE}"
          fi
          if [ "${DRY_RUN}" == "true" ]; then
            set -- "$@" --dry-run
          fi

          kubectl "$@"

        name: Create/update the k8s resource
  azure-aks/update-container-image:
    docker:
    - image: circleci/python:3.7-stretch
    steps:
    - run:
        command: |
          # Verify the CLI isn't already installed
          # Use which instead of command -v for wider coverage of envs

          if which az > /dev/null; then
            echo "Azure CLI installed already."
            exit 0
          fi

          # Set sudo to work whether logged in as root user or non-root user

          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          $SUDO apt-get update && $SUDO apt-get -qqy install apt-transport-https

          if [[ $(command -v lsb_release) == "" ]]; then
            echo "Installing lsb_release"
            $SUDO apt-get -qqy install lsb-release
          fi

          # Create an environment variable for the correct distribution
          export AZ_REPO=$(lsb_release -cs)

          # Modify your sources list

          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
            $SUDO tee /etc/apt/sources.list.d/azure-cli.list

          if [[ $(command -v curl) == "" ]]; then
            echo "Installing curl"
            $SUDO apt-get -qqy install curl
          fi

          # Get the Microsoft signing key

          curl -L https://packages.microsoft.com/keys/microsoft.asc | $SUDO apt-key add -

          # Update and install the Azure CLI

          $SUDO apt-get update
          $SUDO apt-get -qqy install \
            ca-certificates \
            azure-cli
          echo "Azure CLI is now installed."
        name: Install Azure CLI, if not available
    - run:
        command: |
          if [ -n "${AZURE_USERNAME}" ]; then
            echo "User credentials detected; logging in with user"
            az login -u $AZURE_USERNAME -p $AZURE_PASSWORD
          elif [ -n "${AZURE_SP}" ]; then
            echo "Service Principal credentials detected; logging in with Service Principal"
            az login \
              --service-principal \
              --tenant $AZURE_SP_TENANT \
              -u $AZURE_SP \
              -p $AZURE_SP_PASSWORD
          else
            echo "Login failed; neither user nor Service Principal credentials were provided"
            exit 1
          fi
        name: Login to the Azure CLI with user or Service Principal
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kops release
            KOPS_VERSION=$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)
          else
            KOPS_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kops
          curl -LO https://github.com/kubernetes/kops/releases/download/$KOPS_VERSION/kops-$PLATFORM-amd64

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x kops-$PLATFORM-amd64

          $SUDO mv kops-$PLATFORM-amd64 /usr/local/bin/kops
        name: Install kops
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kubectl release
            KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          else
            KUBECTL_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x ./kubectl

          $SUDO mv ./kubectl /usr/local/bin
        name: Install kubectl
    - run:
        command: |
          CLUSTER_NAME="aks-demo-deployment"
          RESOURCE_GROUP="aks-demo-deployment-rg"
          SUBSCRIPTION=""
          GET_ADMIN_CREDENTIALS="false"
          FILE=""
          OVERWRITE_EXISTING="false"
          if [ -n "${CLUSTER_NAME}" ]; then
            set -- "$@" --name "${CLUSTER_NAME}"
          fi
          if [ -n "${RESOURCE_GROUP}" ]; then
            set -- "$@" --resource-group "${RESOURCE_GROUP}"
          fi
          if [ -n "${SUBSCRIPTION}" ]; then
            set -- "$@" --subscription "${SUBSCRIPTION}"
          fi
          if [ "${GET_ADMIN_CREDENTIALS}" == "true" ]; then
            set -- "$@" --admin
          fi
          if [ -n "${FILE}" ]; then
            set -- "$@" --file "${FILE}"
          fi
          if [ "${OVERWRITE_EXISTING}" == "true" ]; then
            set -- "$@" --overwrite-existing
          fi
          az aks get-credentials "$@"
        name: Update the kubectl configuration file so that the cluster can be accessed
    - run:
        command: |+
          RESOURCE_FILE_PATH=""
          RESOURCE_NAME="deployment/nginx-deployment"
          CONTAINER_IMAGE_UPDATES="nginx=nginx:1.9.1"
          NAMESPACE=""
          RECORD="true"
          DRY_RUN="false"
          if [ -n "${RESOURCE_FILE_PATH}" ]; then
            set -- "$@" -f
            set -- "$@" "${RESOURCE_FILE_PATH}"
          elif [ -n "${RESOURCE_NAME}" ]; then
            set -- "$@" "${RESOURCE_NAME}"
          else
            echo "Error: The update-container-image command requires either resource-file-path or resource-name to be specified."
            exit 1
          fi
          if [ -n "${CONTAINER_IMAGE_UPDATES}" ]; then
            set -- "$@" ${CONTAINER_IMAGE_UPDATES}
          fi
          if [ -n "${NAMESPACE}" ]; then
            set -- "$@" --namespace="${NAMESPACE}"
          fi
          set -- "$@" "--record=${RECORD}"
          set -- "$@" "--dry-run=${DRY_RUN}"

          kubectl set image "$@"

        name: Update the container image(s) for the resource
    - run:
        command: |+
          RESOURCE_FILE_PATH=""
          RESOURCE_TYPES="deployment"
          RESOURCE_NAMES="nginx-deployment"
          LABEL_SELECTOR=""
          ALL="false"
          CASCADE="true"
          FORCE="false"
          GRACE_PERIOD="-1"
          IGNORE_NOT_FOUND="false"
          NOW="false"
          WAIT="true"
          NAMESPACE=""
          DRY_RUN="false"
          if [ -n "${RESOURCE_FILE_PATH}" ]; then
            set -- "$@" -f
            set -- "$@" "${RESOURCE_FILE_PATH}"
          elif [ -n "${RESOURCE_TYPES}" ]; then
            set -- "$@" "${RESOURCE_TYPES}"
            if [ -n "${RESOURCE_NAMES}" ]; then
              set -- "$@" ${RESOURCE_NAMES}
            elif [ -n "${LABEL_SELECTOR}" ]; then
              set -- "$@" -l
              set -- "$@" "${LABEL_SELECTOR}"
            fi
          fi
          if [ "${ALL}" == "true" ]; then
            set -- "$@" --all=true
          fi
          if [ "${FORCE}" == "true" ]; then
            set -- "$@" --force=true
          fi
          if [ "${GRACE_PERIOD}" != "-1" ]; then
            set -- "$@" --grace-period="${GRACE_PERIOD}"
          fi
          if [ "${IGNORE_NOT_FOUND}" == "true" ]; then
            set -- "$@" --ignore-not-found=true
          fi
          if [ "${NOW}" == "true" ]; then
            set -- "$@" --now=true
          fi
          if [ -n "${NAMESPACE}" ]; then
              set -- "$@" --namespace="${NAMESPACE}"
          fi
          if [ "${DRY_RUN}" == "true" ]; then
            set -- "$@" --dry-run
          fi
          set -- "$@" --wait="${WAIT}"
          set -- "$@" --cascade="${CASCADE}"

          kubectl delete "$@"

        name: Delete the k8s resource(s)
  azure-aks/delete-cluster:
    docker:
    - image: circleci/python:3.7-stretch
    steps:
    - run:
        command: |
          # Verify the CLI isn't already installed
          # Use which instead of command -v for wider coverage of envs

          if which az > /dev/null; then
            echo "Azure CLI installed already."
            exit 0
          fi

          # Set sudo to work whether logged in as root user or non-root user

          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          $SUDO apt-get update && $SUDO apt-get -qqy install apt-transport-https

          if [[ $(command -v lsb_release) == "" ]]; then
            echo "Installing lsb_release"
            $SUDO apt-get -qqy install lsb-release
          fi

          # Create an environment variable for the correct distribution
          export AZ_REPO=$(lsb_release -cs)

          # Modify your sources list

          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
            $SUDO tee /etc/apt/sources.list.d/azure-cli.list

          if [[ $(command -v curl) == "" ]]; then
            echo "Installing curl"
            $SUDO apt-get -qqy install curl
          fi

          # Get the Microsoft signing key

          curl -L https://packages.microsoft.com/keys/microsoft.asc | $SUDO apt-key add -

          # Update and install the Azure CLI

          $SUDO apt-get update
          $SUDO apt-get -qqy install \
            ca-certificates \
            azure-cli
          echo "Azure CLI is now installed."
        name: Install Azure CLI, if not available
    - run:
        command: |
          if [ -n "${AZURE_USERNAME}" ]; then
            echo "User credentials detected; logging in with user"
            az login -u $AZURE_USERNAME -p $AZURE_PASSWORD
          elif [ -n "${AZURE_SP}" ]; then
            echo "Service Principal credentials detected; logging in with Service Principal"
            az login \
              --service-principal \
              --tenant $AZURE_SP_TENANT \
              -u $AZURE_SP \
              -p $AZURE_SP_PASSWORD
          else
            echo "Login failed; neither user nor Service Principal credentials were provided"
            exit 1
          fi
        name: Login to the Azure CLI with user or Service Principal
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kops release
            KOPS_VERSION=$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)
          else
            KOPS_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kops
          curl -LO https://github.com/kubernetes/kops/releases/download/$KOPS_VERSION/kops-$PLATFORM-amd64

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x kops-$PLATFORM-amd64

          $SUDO mv kops-$PLATFORM-amd64 /usr/local/bin/kops
        name: Install kops
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kubectl release
            KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          else
            KUBECTL_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x ./kubectl

          $SUDO mv ./kubectl /usr/local/bin
        name: Install kubectl
    - run:
        command: |
          CLUSTER_NAME="aks-demo-deployment"
          RESOURCE_GROUP="aks-demo-deployment-rg"
          SUBSCRIPTION=""
          GET_ADMIN_CREDENTIALS="false"
          FILE=""
          OVERWRITE_EXISTING="false"
          if [ -n "${CLUSTER_NAME}" ]; then
            set -- "$@" --name "${CLUSTER_NAME}"
          fi
          if [ -n "${RESOURCE_GROUP}" ]; then
            set -- "$@" --resource-group "${RESOURCE_GROUP}"
          fi
          if [ -n "${SUBSCRIPTION}" ]; then
            set -- "$@" --subscription "${SUBSCRIPTION}"
          fi
          if [ "${GET_ADMIN_CREDENTIALS}" == "true" ]; then
            set -- "$@" --admin
          fi
          if [ -n "${FILE}" ]; then
            set -- "$@" --file "${FILE}"
          fi
          if [ "${OVERWRITE_EXISTING}" == "true" ]; then
            set -- "$@" --overwrite-existing
          fi
          az aks get-credentials "$@"
        name: Update the kubectl configuration file so that the cluster can be accessed
    - run:
        command: |
          CLUSTER_NAME="aks-demo-deployment"
          RESOURCE_GROUP="aks-demo-deployment-rg"
          SUBSCRIPTION=""

          if [ -n "${CLUSTER_NAME}" ]; then
            set -- "$@" --name "${CLUSTER_NAME}"
          fi
          if [ -n "${RESOURCE_GROUP}" ]; then
            set -- "$@" --resource-group "${RESOURCE_GROUP}"
          fi
          if [ -n "${SUBSCRIPTION}" ]; then
            set -- "$@" --subscription "${SUBSCRIPTION}"
          fi

          set -- "$@" --query servicePrincipalProfile.clientId -o tsv


          SERVICE_PRINCIPAL_ID=$(az aks show "$@")


          echo "${SERVICE_PRINCIPAL_ID}" > cci_aks_orb_sp_id_${CLUSTER_NAME}_${RESOURCE_GROUP}
        name: Get the id of the Service Principal for the cluster
    - run:
        command: |+
          RESOURCE_GROUP="aks-demo-deployment-rg"
          SUBSCRIPTION=""
          NO_WAIT="false"
          if [ -n "${RESOURCE_GROUP}" ]; then
            set -- "$@" --name "${RESOURCE_GROUP}"
          fi
          if [ -n "${SUBSCRIPTION}" ]; then
            set -- "$@" --subscription "${SUBSCRIPTION}"
          fi
          if [ "${NO_WAIT}" == "true" ]; then
            set -- "$@" --no-wait
          fi

          az group delete "$@" --yes

        name: Delete AKS cluster and associated resources (e.g. resource group)
        no_output_timeout: 30m
    - run:
        command: |+
          CLUSTER_NAME="aks-demo-deployment"
          RESOURCE_GROUP="aks-demo-deployment-rg"
          SUBSCRIPTION=""

          if [ -n "${SUBSCRIPTION}" ]; then
            set -- "$@" --subscription "${SUBSCRIPTION}"
          fi

          SERVICE_PRINCIPAL_ID=$(cat cci_aks_orb_sp_id_${CLUSTER_NAME}_${RESOURCE_GROUP})
          set -- "$@" --id "${SERVICE_PRINCIPAL_ID}"

          az ad sp delete "$@"

        name: Delete the Service Principal for the cluster
workflows:
  deployment:
    jobs:
    - azure-aks/create-cluster
    - create-deployment:
        requires:
        - azure-aks/create-cluster
    - azure-aks/update-container-image:
        requires:
        - create-deployment
    - azure-aks/delete-cluster:
        requires:
        - azure-aks/update-container-image
  version: 2